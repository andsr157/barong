generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                                        Int           @id @default(autoincrement())
  uuid                                      String?       @default(uuid())
  name                                      String
  email                                     String        @unique
  telp                                      String
  avatar                                    String
  date_created                              DateTime      @default(now())
  update_at                                 DateTime?     @updatedAt
  password                                  String
  role                                      String
  address                                   address[]
  transaction_transaction_partner_idTousers transaction[] @relation("transaction_partner_idTousers")
  transaction_transaction_user_idTousers    transaction[] @relation("transaction_user_idTousers")
}

model address {
  id           Int           @id @default(autoincrement())
  label        String
  address_name String
  detail       String?
  owner_name   String
  owner_telp   String
  latitude     String
  longitude    String
  user_id      Int
  is_main      Boolean
  user         users         @relation(fields: [user_id], references: [id])
  transaction  transaction[]
}

model trashCategory {
  id          Int     @id @default(autoincrement())
  name        String
  subcategory trash[]
}

model trash {
  id                 Int                  @id @default(autoincrement())
  name               String
  minPrice           Int
  maxPrice           Int
  category_id        Int
  transaction_detail transaction_detail[]
  category           trashCategory        @relation(fields: [category_id], references: [id])
}

model status {
  id          Int           @id @default(autoincrement())
  name        String
  label       String
  status      String
  transaction transaction[]
}

model transaction {
  id                                  Int                  @id @default(autoincrement())
  user_id                             Int
  partner_id                          Int?
  address_id                          Int
  image                               String
  status_id                           Int
  partner_rate                        Int?
  partner_review                      String?
  note                                String
  total                               Int?
  date_created                        DateTime             @default(now())
  chats_id                            Int?
  update_at                           DateTime?
  address                             address              @relation(fields: [address_id], references: [id])
  users_transaction_partner_idTousers users?               @relation("transaction_partner_idTousers", fields: [partner_id], references: [id])
  status                              status               @relation(fields: [status_id], references: [id])
  users_transaction_user_idTousers    users                @relation("transaction_user_idTousers", fields: [user_id], references: [id])
  transaction_detail                  transaction_detail[]
}

model transaction_detail {
  id             Int         @id @default(autoincrement())
  transaction_id Int
  trash_id       Int
  price          Int?
  weight         Int
  transaction    transaction @relation(fields: [transaction_id], references: [id])
  trash          trash       @relation(fields: [trash_id], references: [id])
}

model chat {
  id      Int    @id @default(autoincrement())
  message String
}

model chats {
  id           Int        @id @default(autoincrement())
  user_id      Int
  partner_id   Int?
  date_created DateTime   @default(now())
  messages     messages[]
}

model messages {
  id           Int      @id @default(autoincrement())
  chats_id     Int
  sender_id    Int
  content      String
  date_created DateTime @default(now())
  chats        chats    @relation(fields: [chats_id], references: [id])
}

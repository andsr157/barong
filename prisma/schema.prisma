// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id           Int       @id @default(autoincrement())
  uuid         String    @default(uuid())
  name         String
  email        String    @unique
  telp         String
  avatar       String
  date_created DateTime  @default(now())
  update_at    DateTime? @updatedAt
  address      address[]
  password     String
  role         String
}

model address {
  id           Int          @id @default(autoincrement())
  label        String
  address_name String
  detail       String?
  owner_name   String
  owner_telp   String
  latitude     String
  longitude    String
  user         users    @relation(fields: [user_id], references: [id])
  user_id      Int
  is_main      Boolean
  transaction  transaction?
}

model trashCategory {
  id          Int     @id @default(autoincrement())
  name        String
  subcategory trash[]
}

model trash {
  id                 Int                  @id @default(autoincrement())
  name               String
  minPrice           Int
  maxPrice           Int
  category_id        Int
  category           trashCategory        @relation(fields: [category_id], references: [id])
  transaction_detail transaction_detail[]
}

model status {
  id          Int           @id @default(autoincrement())
  name        String
  label       String
  status      String
  transaction transaction[]
}

model transaction {
  id                 Int                  @id @default(autoincrement())
  user_id            Int
  partner_id         Int?
  address            address              @relation(fields: [address_id], references: [id])
  address_id         Int                  @unique
  image              String
  status             status               @relation(fields: [status_id], references: [id])
  status_id          Int
  partner_rate       Int?
  partner_review     String?
  note               String
  total              Int?
  date_created       DateTime             @default(now())
  transaction_detail transaction_detail[]
}

model transaction_detail {
  id             Int         @id @default(autoincrement())
  trash          trash       @relation(fields: [trash_id], references: [id])
  transaction    transaction @relation(fields: [transaction_id], references: [id])
  transaction_id Int
  trash_id       Int
  price          Int?
  weight         Int
}
